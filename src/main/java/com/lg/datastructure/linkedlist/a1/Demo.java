package com.lg.datastructure.linkedlist.a1;

/**
 * 链表专题的第一次练习
 *
 * @author Xulg
 * Created in 2021-01-20 9:03
 */
class Demo {

    /*
     * 链表面试题的解题方法论
     * 1.对于笔试，不用太在意空间复杂度，一切为了时间复杂度
     * 2.对于面试，时间复杂度放在第一位，但是一定要找到空间最省的方法
     */

    /* ****************************************************************************************************************/

    /*
     * 链表复制的技巧
     *  1.使用hash表，存原节点和复制节点的映射关系，再遍历原节点，用映射关系构建复制链表
     *      时间复杂度O(n)
     *      空间复杂度O(n)
     *      笔试用
     *  2.使用插入法，将复制节点插入在原节点后面，然后进行链表分离
     *      时间复杂度O(n)
     *      空间复杂度O(1)
     *      面试用
     */

    /*
     * 判断链表是否有环的技巧
     *  1.使用Set集合表   实现简单，笔试优先用这方式，除非有要求(空间复杂度)
     *      1).遍历整个链表，往Set集合加入节点。如果Set集合中已存在这个节点，就是有环链表，且这个节点就是入环点；否则直接将
     *         节点加入Set集合，判断下一个节点去，直到遍历结束。
     *          时间复杂度O(n)
     *          空间复杂度O(n)
     *  2.使用快慢指针    实现复杂，面试用用
     *      1).起初快指针faster步长为2，慢指针slower步长为1，快慢指针一起移动遍历整个链表。如果快指针指向了null说明
     *         快指针已经遍历完了，这个链表没有环，可以直接返回；否则继续遍历，直到快慢指针相遇才结束。
     *      2).快指针回到链表的头位置，慢指针不变，两个指针都以步长为1移动。快慢指针相遇点就是入环点，返回。
     *          时间复杂度O(n)
     *          空间复杂度O(1)
     */

    /*
     * 链表反转的技巧
     *  无论是单向链表还是双向链表，都需要2个变量：
     *      Node prev = null; 用来保存当前节点
     *      Node next = null; 用来保存当前节点的下一个节点
     *  操作结束后，prev就是反转后链表的header节点。
     */
}
