package com.lg.datastructure.binarysearchtree;

/**
 * 二叉搜索树
 *
 * @author Xulg
 * Created in 2021-03-14 21:15
 */
class BinarySearchTreeDemo {

    /*
     * 二叉搜索树
     *  定义：任意一个节点，左孩子的值比它小，右孩子的值大于它
     *  问题：二叉搜索树有可能退化成链表，导致增删改查的时间复杂度上升为O(N)
     *
     * 平衡二叉搜索树
     *  定义：任意一个节点，它的左子树和右子树的高度差不超过1，增删改查的时间复杂度为log(N)
     *  平衡：插入，删除操作后，保证左右子树高度差不多
     *
     *  如何做到平衡：
     *      根据某一个节点位置，进行左旋，右旋
     *
     *  左旋：将节点X往树的左边倒下去，X节点的右孩子上升，X节点的右孩子的左孩子作为X节点的右孩子
     *      例如：以a节点为中心进行左旋
     *                                a
     *                              /   \
     *                             s     b
     *                                 /   \
     *                                t     c
     *                                    /   \
     *                                   k     w
     *
     *                                 b
     *                              /     \
     *                             a       c
     *                           /   \   /   \
     *                          s     t k     w
     *
     *  右旋：将节点X往树的右边倒下去，X节点的左孩子上升，X节点的左孩子的右孩子作为X节点的左孩子
     *      例如：以a节点为中心进行右旋
     *                                a
     *                              /   \
     *                             b     t
     *                           /   \
     *                          c     s
     *                        /   \
     *                       e     d
     *
     *                                 b
     *                              /     \
     *                             c       a
     *                           /   \   /   \
     *                          e     d s     t
     */

    /*
     * AVL树：
     *  任意一个节点，它的左树和右树的高度差的小于2
     *
     *  检查平衡性：
     *      从受影响的位置开始往上查每个父位置的平衡性
     */

    /*
     * SB树(SizeBalanceTree)
     *  任意一个叔叔节点的节点数量，不少于它的任何一个侄子节点的节点数量
     *      兄弟节点：同一层的别的节点
     *      叔叔节点：有兄弟节点的节点
     *      侄子节点：兄弟节点的子节点
     *
     *  检查平衡性：
     *      从受影响的位置开始往上查每个父位置的平衡性
     */

    /*
     * 红黑树
     *  1.每个节点不是红色就是黑色
     *  2.头节点是黑色，叶子节点是黑色
     *  3.红色节点的子节点一定是黑色的节点
     *  4.从任意一个节点出发，到它的每一个子节点，所有路径上的黑色节点数量一样
     *  上面4点规定了平衡性
     *
     *  检查平衡性：
     *      从受影响的位置开始往上查每个父位置的平衡性
     */

}
